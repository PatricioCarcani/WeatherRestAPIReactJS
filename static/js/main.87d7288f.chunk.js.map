{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","console","log","datosConsulta","onSubmit","this","id","name","ref","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","weather","main","urlIcono","concat","icon","altIcono","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87d7288f.chunk.js","sourcesContent":["import React from 'react';\r\n{/*import PropTypes from 'prop-types';*/}\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <header>\r\n                <nav>\r\n                    <div className=\"nav-wrapper light-blue darken-2\">\r\n                        <h1 className=\"brand-logo\">{props.titulo}</h1>\r\n                    </div>\r\n                </nav>\r\n            </header>          \r\n        </div>\r\n    )\r\n}\r\n{/*\r\nHeader.PropTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n*/}\r\nexport default Header;","import React, { Component } from 'react';\r\n{/*import PropTypes from 'prop-types';*/}\r\n\r\nclass Formulario extends Component {\r\n\r\n\r\n    // refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n        //leer refs y crear el objeto a enviar por props\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n        }\r\n        console.log(respuesta);\r\n        // enviar por props\r\n        this.props.datosConsulta(respuesta);\r\n        // resetear el form\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input id=\"ciudad\" name=\"ciudad\" ref={this.ciudadRef} type=\"text\" />\r\n                                <label htmlFor=\"ciudad\">Ciudad:</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un país</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">México</option>\r\n                                    <option value=\"PE\">Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País:</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar\" />\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n{/*\r\nFormulario.PropTypes = {\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n*/}\r\nexport default Formulario;","import React from 'react';\r\n{/*import PropTypes from 'prop-types';*/}\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n{/*\r\nError.PropTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n*/}\r\nexport default Error;","import React, { Component } from 'react';\r\n{/*import PropTypes from 'prop-types';*/}\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n        \r\n        // obtener los datos de la consulta\r\n        const {name, weather, main} = this.props.resultado;\r\n        // si llega vacia:\r\n        if( !name || !weather || !main ) return null;\r\n        // para convertir K a C\r\n        const kelvin = 273.15;\r\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const altIcono = `Clima de ${name}`;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>El clima en {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: { (main.temp - kelvin).toFixed(1) } &deg;C\r\n                                <img src={urlIcono} alt={altIcono} />\r\n                            </p>\r\n                            <p>Max. {(main.temp_max - kelvin).toFixed(0)} &deg;C</p>\r\n                            <p>Min. {(main.temp_min - kelvin).toFixed(0)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n{/*\r\nClima.PropTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n*/}\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component {\n\n\n  state = {\n    error: \"\",\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidMount() {\n    this.setState({\n      error: false\n    })\n  }\n\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais) return null;\n    const appId = \"02d29608fbbed3c7f8779eed442902df\";\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n    //query con fetch api, la cual no requiere libreria\n    fetch(url)\n      .then(respuesta => {\n        // es un json\n        return respuesta.json();\n      })\n      .then(datos => {\n        this.setState({\n          resultado : datos\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n    //leer la url y agregar el api key\n    //consultar con fetch\n  }\n\n  //uso de props para evitar que se siga ejecutando ad infinitum\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n  }\n\n  datosConsulta = respuesta => {\n    console.log(respuesta);\n    if(respuesta.ciudad === \"\" || respuesta.pais === \"\") {\n      console.log('Error al validar');\n      this.setState({\n        error: true\n      })\n    } else {\n      console.log('Formulario validado correctamente');\n      this.setState({\n        error: false,\n        consulta: respuesta\n      })\n    }\n    \n  }\n\n  render() {\n\n    const {error} = this.state,\n          {cod} = this.state.resultado;\n    let resultado;\n\n    if(error) {\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if(cod === \"404\") {\n      resultado = <Error mensaje=\"Ciudad no encontrada\" />\n    } else {\n      resultado = <Clima resultado={this.state.resultado} />\n    }\n\n    return (\n      <div className=\"App\">\n        <Header\n          titulo=\"Buscador de clima en React\"\n        />\n        <Formulario\n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}